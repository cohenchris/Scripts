# Batocera SSH user and host string
# batocera.sh
BATOCERA_HOST="user@domain.com"

# Email where notifications will be sent to
# drive-health.sh
EMAIL=""

# Directory where media files are stored (used for file permissions)
# scan-media-files.sh
MEDIA_FILES_DIR=""

# HomeAssistant webhook endpoint to use for generic notifications
# server/ha-notify.sh
HA_NOTIFY_WEBHOOK_ENDPOINT=""

# Directory which contains the server docker-compose.yml file
# server/test-qbittorrent.sh
SERVER_DIR=""

# Directory where Nextcloud files are stored (used for for file permissions/scanning)
# server/nextcloud/scan-nextcloud-files.sh
NEXTCLOUD_FILES_DIR=""

# Lidarr credentials
# server/lidarr-monitor-new-albums.sh
LIDARR_URL=""
LIDARR_API_KEY=""

# Remote Backblaze B2 backups bucket name
# b2-fuse.sh
BACKBLAZE_BUCKET=""

################################################################################
################################ DO NOT TOUCH ##################################
################################################################################

# require(type, name)
#   type - type of check ("var" or "file")
#   name - name of variable or file to check
#
# This function will throw an error if the provided variable is not set
function require() {
  local type="$1"
  local name="$2"

  if [ "${type}" == "var" ]; then
    # Variable type - check if this exists in the env
    if [ -z "${!name}" ]; then
      # Log variable name and calling function name
      echo -e "ERROR - variable \"${name}\" is not set - required by ${FUNCNAME[1]:-env}"
      exit 1
    fi

  elif [ "${type}" == "file" ]; then
    # File type - check if this file path exists
    if ! [ -f ${name} ]; then
      # Log variable name and calling function name
      echo -e "ERROR - file \"${name}\" does not exist - required by ${FUNCNAME[1]:-env}"
      exit 1
    fi

  else
    # Invalid type provided
    echo "Invalid type passed to ${FUNCNAME[1]:-env} - \"${type}\""
  fi

}
